package victory.engine.graphics;

/**
 * A screen based on MS-DOS, and other text-based terminals
 * 
 * @author LU ID 0296738
 */
@Deprecated
public class DosScreen extends Screen{
	/**
	 * Generated by Eclipse because it wanted me to.
	 */
	private static final long serialVersionUID = 4249805769435067479L;
	/**
	 * Usage: last 8 bits represent the tile used on the screen coordinate, based on IBM code page 437. The next 4 bits
	 * represent the color to be used on the tile. bit structure is %...wrgbxxxxxxxx where w is the light level, rgb is
	 * the color, and xxxxxxxx is the character to use.
	 */
	private int[][] tiles;
	/**
	 * The tiles as they were during the last update.
	 */
	private int[][] lastTiles;
	SpriteSheet cp437; // IBM code page 437, as it appears on DOS.
	
	/**
	 * A screen component made to look like old console-based OSes, specifically one with IBM's Code Page 437 text
	 * standard.
	 * 
	 * @param w
	 *            width
	 * @param h
	 *            height
	 * @param s
	 *            pixel scale of the component.
	 */
	public DosScreen(int w, int h, int s){
		super(w, h, s);
		tiles = new int[w / 8][h / 8];
		lastTiles = new int[w / 8][h / 8];
		for(int j = 0; j < tiles[0].length; j++){
			for(int i = 0; i < tiles.length; i++){
				tiles[i][j] = 0;
				lastTiles[i][j] = 0;
			}
		}
		cp437 = new SpriteSheet("res/char8.png");
	}
	
	/**
	 * Updates the super-component (Screen) using the tiles contained in this DosScreen.
	 */
	public void update(){
		for(int j = 0; j < tiles[0].length; j++){
			for(int i = 0; i < tiles.length; i++){
				int color = getTileColor(i, j); // color to replace "white" with
				if(tiles[i][j] != lastTiles[i][j]){
					for(int y = 0; y < 8; y++){
						for(int x = 0; x < 8; x++){
							int indexX = ((tiles[i][j]) & 0b1111) * 8;
							int indexY = ((tiles[i][j] >> 4) & 0b1111) * 8;
							super.writePixel((i * 8) + x, (j * 8) + y,
									(cp437.getPixel(indexX + x, indexY + y) == -1) ? color : 0xFF000000);
						}
					}
				}
			}
		}
		for(int j = 0; j < tiles[0].length; j++){
			for(int i = 0; i < tiles.length; i++){
				lastTiles[i][j] = tiles[i][j];
			}
		}
	}
	
	/**
	 * Gets the width of the tiles array.
	 * 
	 * @return tiles[][] width
	 */
	public int getTilesWidth(){
		return tiles.length;
	}
	
	/**
	 * Gets the height of the tiles array.
	 * 
	 * @return tiles[][] height
	 */
	public int getTilesHeight(){
		return tiles[0].length;
	}
	
	/**
	 * Sets a tile to a certain character and color
	 * 
	 * @param x
	 *            coordinate
	 * @param y
	 *            coordinate
	 * @param t
	 *            tile to write (tile as in char between 0x00 and 0xFF)
	 * @param c
	 *            color (in 0bXXXX format)
	 */
	public void writeTile(int x, int y, char t, int c){
		if(x < 0 || x >= tiles.length || y < 0 || y >= tiles[0].length){
			return;
		}
		int result = t;
		int color = c;
		color <<= 8; // shift to give us enough room for the cp437 index;
		result += color;
		tiles[x][y] = result;
	}
	
	/**
	 * Get the color of the particular tile
	 * 
	 * @param x
	 *            coordinate
	 * @param y
	 *            coordinate
	 * @return tile's color (0xFFXXXXXX format)
	 */
	private int getTileColor(int x, int y){
		int color = tiles[x][y]; // store the current tile info
		color >>= 8; // shift it into a usable position
		color &= 0b1111; // only have the good digits
		switch(color){
			case BLACK:
				return 0xFF000000; // black
			case DBLUE:
				return 0xFF000080; // dark blue
			case DGREEN:
				return 0xFF008000; // dark green
			case DCYAN:
				return 0xFF008080; // dark cyan
			case DRED:
				return 0xFF800000; // dark red
			case DMAGENTA:
				return 0xFF800080; // dark magenta
			case DYELLOW:
				return 0xFF808000; // dark yellow
			case DWHITE:
				return 0xFFC0C0C0; // dark white (light grey)
			case BBLACK:
				return 0xFF808080; // bright black (dark grey)
			case BLUE:
				return 0xFF0000FF; // blue
			case GREEN:
				return 0xFF00FF00; // green
			case CYAN:
				return 0xFF00FFFF; // cyan
			case RED:
				return 0xFFFF0000; // red
			case MAGENTA:
				return 0xFFFF00FF; // magenta
			case YELLOW:
				return 0xFFFFFF00; // yellow
			case WHITE:
				return 0xFFFFFFFF; // white
			default:
				return 0xFF808080; // bright black
		}
	}
	
	/**
	 * Writes one random tile with one random character and one random color
	 */
	@Override
	public void scatter(int i){
		int ux = (int)(Math.random() * getTilesWidth());
		int uy = (int)(Math.random() * getTilesHeight());
		char t = (char)(Math.random() * 0x100);
		int c = (int)(Math.random() * 0x10);
		writeTile(ux, uy, t, c);
	}
	
	@Override
	public void render(){
		update();
		super.render();
	}
	
	public void draw(DosDrawable d){
		//TODO this
	}
	
	/**
	 * Draws a string of text on the screen.
	 * @param x coordinate
	 * @param y coordinate
	 * @param text text to write
	 * @param color color of the text to write
	 */
	public void drawText(int x, int y, String text, int color){
		int dx = x;
		int dy = y;
		char[] c = text.toCharArray();
		for(int i = 0; i < c.length; i++){
			if(c[i] == '\t'){
				// tab
				dx++;
				while(dx % 4 != 0){
					dx++;
				}
			}else if(c[i] == '\b'){
				// backspace
				dx--;
			}else if(c[i] == '\n'){
				// new line
				dx = x;
				dy++;
			}else{
				writeTile(dx, dy, c[i], color);
				dx++;
			}
		}
	}
	
	/**
	 * Draws a doubled box on the screen.
	 * @param x coordinate
	 * @param y coordinate
	 * @param w width
	 * @param h height
	 * @param c color of the box
	 */
	public void drawBox(int x, int y, int w, int h, int c){
		for(int j = 0; j < h; j++){
			for(int i = 0; i < w; i++){
				char t = ' ';
				if(i == 0 && j == 0){
					t = (char)0xC9; // top left corner, double
				}else if(i == w - 1 && j == 0){
					t = (char)0xBB; // top right corner, double
				}else if(i == 0 && j == h - 1){
					t = (char)0xC8; // bottom left, double
				}else if(i == w - 1 && j == h - 1){
					t = (char)0xBC; // bottom right, double
				}else if(j == 0 || j == h - 1){
					t = (char)0xCD; // horizontal, double
				}else if(i == 0 || i == w - 1){
					t = (char)0xBA; // vertical, double
				}else{
					t = (char)0x00; // blank
				}
				writeTile(x + i, y + j, t, c);
			}
		}
	}
	
	/**
	 * A bleak color.
	 */
	public final int BLACK = 0b0000;
	/**
	 * A moody color.
	 */
	public final int DBLUE = 0b0001;
	/**
	 * An envious color.
	 */
	public final int DGREEN = 0b0010;
	/**
	 * An icy color.
	 */
	public final int DCYAN = 0b0011;
	/**
	 * An angry color.
	 */
	public final int DRED = 0b0100;
	/**
	 * A passionate color.
	 */
	public final int DMAGENTA = 0b0101;
	/**
	 * A strange color.
	 */
	public final int DYELLOW = 0b0110;
	/**
	 * A polarizing color.
	 */
	public final int DWHITE = 0b0111;
	/**
	 * A difficult color.
	 */
	public final int BBLACK = 0b1000;
	/**
	 * A calming color.
	 */
	public final int BLUE = 0b1001;
	/**
	 * A pure color.
	 */
	public final int GREEN = 0b1010;
	/**
	 * A bright color.
	 */
	public final int CYAN = 0b1011;
	/**
	 * An emotional color.
	 */
	public final int RED = 0b1100;
	/**
	 * A cute color.
	 */
	public final int MAGENTA = 0b1101;
	/**
	 * A youthful color.
	 */
	public final int YELLOW = 0b1110;
	/**
	 * Not a color.
	 */
	public final int WHITE = 0b1111;
}
